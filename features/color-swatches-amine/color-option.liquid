{% comment %}
  Renders product variant options

  Accepts:
  - product: {Object} product object.
  - option: {Object} current product_option object.
  - block: {Object} block object.


  Usage:
  {% render 'product-variant-options',
    product: product,
    option: option,
    block: block
  %}
{% endcomment %}

{%- liquid
  assign variants_available_arr = product.variants | map: 'available'
  assign variants_option1_arr = product.variants | map: 'option1'
  assign variants_option2_arr = product.variants | map: 'option2'
  assign variants_option3_arr = product.variants | map: 'option3'

  assign product_form_id = 'product-form-' | append: section.id

  assign swatch_type = settings.swatch_type
  assign swatch_style = settings.swatch_style
  assign swatch_size = settings.swatch_size
  assign swatch_colors = settings.swatch_colors | newline_to_br | split: '<br />'
-%}

<style>
  .product-form__input input[type='radio'] + label.color-swatch,
  .product-form__input input[type='radio'] + label.color-swatch:after,
  .product-form__input input[type='radio'] + label.color-swatch:before{
    border-radius: 0;
  }
  .product-form__input input[type='radio'] + label.color-swatch.round,
  .product-form__input input[type='radio'] + label.color-swatch.round:after,
  .product-form__input input[type='radio'] + label.color-swatch.round:before{
    border-radius: 100%;
  }
  .product-form__input input[type='radio'] + label.color-swatch.round-corners,
  .product-form__input input[type='radio'] + label.color-swatch.round-corners:after,
  .product-form__input input[type='radio'] + label.color-swatch.round-corners:before{
    border-radius: 5px;
  }
  .product-form__input input[type='radio'] + label.color-swatch{
    border:1px rgb(214,214,214) solid;
    width: {{ swatch_size }}px;
    height: {{ swatch_size }}px;
    background-repeat: no-repeat;
    background-position: center;
    background-size: cover;
    margin-right: 9px;
  }
  .product-form__input input[type='radio'] + label.color-swatch:before{
    content: "";
    position: absolute;
    top: -1px;
    left: -1px;
    width: calc(100% + 2px);
    height: calc(100% + 2px);
    border: 1px rgb(214,214,214) solid;
    z-index: 0;
  }
  .product-form__input input[type='radio'] + label.color-swatch:after{
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: 1;
    {%- if settings.dark or swatch_type == "variantImage" -%}
      border: none;
    {%- else -%}
      border: 3px rgb(255 255 255) solid;
    {%- endif -%}
  }
  .product-form__input input[type='radio'] + label.color-swatch:hover:before{
    border: 1px rgb(125 124 124) solid;
  }
  .product-form__input input[type='radio']:checked + label.color-swatch:before{
  {%- if settings.dark -%}
    box-shadow: 0 0 0 2px rgb(var(--color-foreground));
    {%- else -%}
    box-shadow: 0 0 0 1px rgb(var(--color-foreground));
    {%- endif -%}
    border-color:rgb(var(--color-foreground));
  }
  .product-form__input input[type='radio'] + label.color-swatch.variant-swatch{
    background-color:white;
    {%- if swatch_style == "portrait" -%}
    height: calc({{ swatch_size }}px/ 0.66);
    {%- endif -%}
  }
</style>

{%- for value in option.values -%}
  {%- liquid
    assign option_disabled = true

    for option1_name in variants_option1_arr
      case option.position
        when 1
          if variants_option1_arr[forloop.index0] == value and variants_available_arr[forloop.index0]
            assign option_disabled = false
          endif
        when 2
          if option1_name == product.selected_or_first_available_variant.option1 and variants_option2_arr[forloop.index0] == value and variants_available_arr[forloop.index0]
            assign option_disabled = false
          endif
        when 3
          if option1_name == product.selected_or_first_available_variant.option1 and variants_option2_arr[forloop.index0] == product.selected_or_first_available_variant.option2 and variants_option3_arr[forloop.index0] == value and variants_available_arr[forloop.index0]
            assign option_disabled = false
          endif
      endcase
    endfor
  -%}

  {%- if block.settings.picker_type == 'button' -%}
    <input
      type="radio"
      id="{{ section.id }}-{{ option.position }}-{{ forloop.index0 }}"
      name="{{ option.name }}"
      value="{{ value | escape }}"
      form="{{ product_form_id }}"
      {% if option.selected_value == value %}
        checked
      {% endif %}
      {% if option_disabled %}
        class="disabled"
      {% endif %}
    >
    {%- if swatch_type == 'variantImage' -%}
      <label data-{{ option.name | downcase | replace: ' ', '-' }}="{{ value }}"
        style="
          background-image:url(
            {%- liquid
              assign option_index = option.position | minus: 1
              for variant in product.variants
                if variant.options[option_index] == value
                  assign swatch_size_portrait = swatch_size | times: 2
                  echo variant.image | image_url: width: swatch_size_portrait
                  break
                endif
              endfor
            -%}
          );"
        class="color-swatch variant-swatch {% case swatch_style %}{% when "round" %}round{% when "square-round-corners" %}round-corners{% endcase %}"
        for="{{ section.id }}-{{ option.position }}-{{ forloop.index0 }}"
      >
        <span class="visually-hidden">{{ 'products.product.variant_sold_out_or_unavailable' | t }}</span>
        {% comment %} code incase of variant metafield {% endcomment %}
        {% comment %} <div class="visually-hidden">
          {% assign option_index = option.position | minus: 1 %}
          {% for variant in product.variants %}
            {% if variant.options[option_index] == value %}
              {{ variant.metafields.custom.packages_text | metafield_tag }}
            {% endif %}
          {% endfor %}
        </div> {% endcomment %}
      </label>
    {%- else -%}
      {%- liquid
        for color_data in swatch_colors
          assign color_data_arr = color_data | split: ':'
          assign rule_name = color_data_arr[0] | strip
          if value == rule_name
            assign color_codes = color_data_arr[1] | strip | split: '#'
            assign color_number = 0 | plus: color_codes.size
            break
          endif
        endfor
      -%}
      <label data-{{ option.name | downcase | replace: ' ', '-' }}="{{ value }}"
        style="
          {%- case color_number -%}
          {%- when 2 -%}
              background-color: #{{ color_codes[1] }}
          {%- when 3 -%}
              background: linear-gradient(135deg, #{{ color_codes[1] }} 50%, #{{ color_codes[2] }} 50%);
          {%- when 4 -%}
              background: linear-gradient(to right,#{{ color_codes[1] }} 33%,#{{ color_codes[2] }} 33%,#{{ color_codes[2] }} 66%, #{{ color_codes[3] }} 66%);
          {%- else -%}
              background-image:url({{ color_codes[0] | downcase | replace: ' ', '-' | file_img_url }})
          {%- endcase -%}
          ;
        "
        class="color-swatch {% case swatch_style %}{% when "round" %}round{% when "square-round-corners" %}round-corners{% endcase %}"
        for="{{ section.id }}-{{ option.position }}-{{ forloop.index0 }}"
      >
        <span class="visually-hidden">Sold Out</span>
      </label>
      {%- assign color_codes = '' -%}
    {%- endif -%}
  {%- elsif block.settings.picker_type == 'dropdown' -%}
    <option
      value="{{ value | escape }}"
      {% if option.selected_value == value %}
        selected="selected"
      {% endif %}
    >
      {% if option_disabled -%}
        {{- 'products.product.value_unavailable' | t: option_value: value -}}
      {%- else -%}
        {{- value -}}
      {%- endif %}
    </option>
  {%- endif -%}
{%- endfor -%}

<script>
  document.querySelectorAll('input+label[data-{{ option.name | downcase | replace: ' ', '-'  }}]').forEach(el=>{
    el.addEventListener('click',()=>{
      document.querySelector('#selected-{{ option.name | downcase | replace: ' ', '-'  }}').textContent = " "+el.getAttribute('data-{{ option.name | downcase | replace: ' ', '-'  }}')
    })
  })
</script>


{% comment %} liquid for getting hexcode from settings {% endcomment %}
 
{% liquid
    assign swatch_colors = settings.swatch_colors | newline_to_br | split: '<br />'
  assign has_clr = false
          
  for color_obj in swatch_colors 
    assign color_name = color_obj | split: ':' | first | handleize | downcase
    assign haxcode = color_obj | split: ':' | last 
    assign label = value | handleize | downcase
    if color_name == label
      assign css_color = haxcode
      assign has_clr = true
      break
    endif
  endfor

  unless has_clr
    assign css_color = value | split: ' ' | last | downcase
  endunless
%}
